From dacbddb0377272aebb8a3dfdbcbac87285599b5d Mon Sep 17 00:00:00 2001
From: Shen Jiamin <shen_jiamin@comp.nus.edu.sg>
Date: Fri, 13 Jan 2023 07:07:00 +0800
Subject: [PATCH 1/2] add fpga_load driver

Signed-off-by: Shen Jiamin <shen_jiamin@comp.nus.edu.sg>
---
 core/arch/arm/mm/pgt_cache.c        |   3 +
 core/drivers/zynqmp_pm.c            | 318 ++++++++++++++++------------
 core/include/drivers/zynqmp_pm.h    |   2 +
 core/kernel/tee_misc.c              |   8 +-
 core/pta/sub.mk                     |   1 +
 core/pta/zynqmp_pm.c                |  93 ++++++++
 lib/libutee/include/pta_zynqmp_pm.h |  28 +++
 lib/libutils/ext/trace.c            |   2 +-
 8 files changed, 322 insertions(+), 133 deletions(-)
 create mode 100644 core/pta/zynqmp_pm.c
 create mode 100644 lib/libutee/include/pta_zynqmp_pm.h

diff --git a/core/arch/arm/mm/pgt_cache.c b/core/arch/arm/mm/pgt_cache.c
index a7b1b10e..116dd4e9 100644
--- a/core/arch/arm/mm/pgt_cache.c
+++ b/core/arch/arm/mm/pgt_cache.c
@@ -813,6 +813,9 @@ bool pgt_check_avail(struct user_mode_ctx *uctx)
 		}
 	}
 
+	if (tbl_count > PGT_CACHE_SIZE) {
+		DMSG("tbl_count = %lu / %d\n", tbl_count, PGT_CACHE_SIZE);
+	}
 	return tbl_count <= PGT_CACHE_SIZE;
 }
 
diff --git a/core/drivers/zynqmp_pm.c b/core/drivers/zynqmp_pm.c
index 46c8d51c..969c2953 100644
--- a/core/drivers/zynqmp_pm.c
+++ b/core/drivers/zynqmp_pm.c
@@ -3,7 +3,10 @@
  * Copyright (C) 2021 Foundries.io Ltd
  */
 
+#include "tee_api_defines.h"
+#include "trace.h"
 #include <arm.h>
+#include <drivers/zynqmp_csudma.h>
 #include <drivers/zynqmp_pm.h>
 #include <kernel/cache_helpers.h>
 #include <kernel/tee_misc.h>
@@ -20,38 +23,68 @@
  * handling in TF-A check
  * https://xilinx-wiki.atlassian.net/wiki/spaces/A/pages/18842107/Arm+Trusted+Firmware
  */
-#define EFUSE_ACCESS_SMC	0xC2000035
-#define VERSION_ACCESS_SMC	0xC2000018
+#define EFUSE_ACCESS_SMC   0xC2000035
+#define VERSION_ACCESS_SMC 0xC2000018
+#define PM_FPGA_LOAD       0xC2000016
+#define PM_FPGA_GET_STATUS 0xC2000017
+#define PM_FPGA_READ       0xC200002E
 
-#define EFUSE_NOT_ENABLED	29
-#define VERSION_MASK		GENMASK_32(3, 0)
+#define EFUSE_NOT_ENABLED 29
+#define VERSION_MASK      GENMASK_32(3, 0)
+
+/* PMU-FW return status codes */
+static const char *str_pm_ret_status(uint32_t res)
+{
+    switch (res) {
+    case 0:
+        return "XST_PM_SUCCESS";
+    case 19:
+        return "XST_PM_NO_FEATURE";
+    case 2000:
+        return "XST_PM_INTERNAL";
+    case 2001:
+        return "XST_PM_CONFLICT";
+    case 2002:
+        return "XST_PM_NO_ACCESS";
+    case 2003:
+        return "XST_PM_INVALID_NODE";
+    case 2004:
+        return "XST_PM_DOUBLE_REQ";
+    case 2005:
+        return "XST_PM_ABORT_SUSPEND";
+    case 2008:
+        return "XST_PM_MULT_USER";
+    default:
+        return NULL;
+    }
+}
 
 static uint32_t zynqmp_sip_call(uint32_t pm_api_id, uint32_t arg0,
-				uint32_t arg1, uint32_t arg2, uint32_t arg3,
-				uint32_t *payload)
+    uint32_t arg1, uint32_t arg2, uint32_t arg3,
+    uint32_t *payload)
 {
-	struct thread_smc_args args = {
-		.a0 = pm_api_id,
-		.a1 = reg_pair_to_64(arg1, arg0),
-		.a2 = reg_pair_to_64(arg3, arg2),
-	};
-
-	thread_smccc(&args);
-
-	if (payload) {
-		switch (pm_api_id) {
-		case EFUSE_ACCESS_SMC:
-			*payload = args.a0 >> 32;
-			break;
-		case VERSION_ACCESS_SMC:
-			*payload = args.a1 & VERSION_MASK;
-			break;
-		default:
-			break;
-		}
-	}
-
-	return args.a0;
+    struct thread_smc_args args = {
+        .a0 = pm_api_id,
+        .a1 = reg_pair_to_64(arg1, arg0),
+        .a2 = reg_pair_to_64(arg3, arg2),
+    };
+
+    thread_smccc(&args);
+
+    if (payload) {
+        switch (pm_api_id) {
+        case EFUSE_ACCESS_SMC:
+            *payload = args.a0 >> 32;
+            break;
+        case VERSION_ACCESS_SMC:
+            *payload = args.a1 & VERSION_MASK;
+            break;
+        default:
+            break;
+        }
+    }
+
+    return args.a0;
 }
 
 /*
@@ -66,133 +99,158 @@ static uint32_t zynqmp_sip_call(uint32_t pm_api_id, uint32_t arg0,
  *              1 - represents PUF user eFuse row number.
  */
 struct xilinx_efuse {
-	uint64_t src;
-	uint32_t size;
-	uint32_t offset;
-	uint32_t flag;
-	uint32_t pufuserfuse;
+    uint64_t src;
+    uint32_t size;
+    uint32_t offset;
+    uint32_t flag;
+    uint32_t pufuserfuse;
 };
 
-enum efuse_op { EFUSE_READ = 0, EFUSE_WRITE = 1 };
+enum efuse_op { EFUSE_READ = 0,
+    EFUSE_WRITE = 1 };
 
-#define EFUSE_ELT(__x) \
-	[__x] = { \
-		.offset = ZYNQMP_EFUSE_##__x##_OFFSET, \
-		.bytes = ZYNQMP_EFUSE_##__x##_LENGTH, \
-	}
+#define EFUSE_ELT(__x)                         \
+    [__x] = {                                  \
+        .offset = ZYNQMP_EFUSE_##__x##_OFFSET, \
+        .bytes = ZYNQMP_EFUSE_##__x##_LENGTH,  \
+    }
 
 static const struct {
-	uint32_t offset;
-	uint32_t bytes;
+    uint32_t offset;
+    uint32_t bytes;
 } efuse_tbl[] = {
-	EFUSE_ELT(DNA),
-	EFUSE_ELT(IP_DISABLE),
-	EFUSE_ELT(USER0),
-	EFUSE_ELT(USER1),
-	EFUSE_ELT(USER2),
-	EFUSE_ELT(USER3),
-	EFUSE_ELT(USER4),
-	EFUSE_ELT(USER5),
-	EFUSE_ELT(USER6),
-	EFUSE_ELT(USER7),
-	EFUSE_ELT(MISC_USER_CTRL),
-	EFUSE_ELT(SEC_CTRL),
+    EFUSE_ELT(DNA),
+    EFUSE_ELT(IP_DISABLE),
+    EFUSE_ELT(USER0),
+    EFUSE_ELT(USER1),
+    EFUSE_ELT(USER2),
+    EFUSE_ELT(USER3),
+    EFUSE_ELT(USER4),
+    EFUSE_ELT(USER5),
+    EFUSE_ELT(USER6),
+    EFUSE_ELT(USER7),
+    EFUSE_ELT(MISC_USER_CTRL),
+    EFUSE_ELT(SEC_CTRL),
 };
 
 static TEE_Result efuse_op(enum efuse_op op, uint8_t *buf, size_t buf_sz,
-			   enum zynqmp_efuse_id id, bool puf)
+    enum zynqmp_efuse_id id, bool puf)
 {
-	struct xilinx_efuse *efuse_op = NULL;
-	uint8_t *tmpbuf = NULL;
-	paddr_t addr = 0;
-	uint32_t efuse_ret = 0;
-	TEE_Result res = TEE_ERROR_GENERIC;
-
-	if (!buf)
-		return TEE_ERROR_BAD_PARAMETERS;
-
-	if (id >= ARRAY_SIZE(efuse_tbl)) {
-		EMSG("Invalid efuse");
-		return TEE_ERROR_BAD_PARAMETERS;
-	}
-
-	efuse_op = alloc_cache_aligned(sizeof(*efuse_op));
-	if (!efuse_op) {
-		EMSG("Failed to allocate cache aligned buffer for operation");
-		return TEE_ERROR_OUT_OF_MEMORY;
-	}
-
-	tmpbuf = alloc_cache_aligned(buf_sz);
-	if (!tmpbuf) {
-		EMSG("Failed to allocate cache aligned buffer for data");
-		res = TEE_ERROR_OUT_OF_MEMORY;
-		goto out;
-	}
-
-	if (op == EFUSE_WRITE)
-		memcpy(tmpbuf, buf, buf_sz);
-
-	efuse_op->size = efuse_tbl[id].bytes / sizeof(uint32_t);
-	efuse_op->offset = efuse_tbl[id].offset;
-	efuse_op->src = virt_to_phys(tmpbuf);
-	efuse_op->pufuserfuse = puf;
-	efuse_op->flag = op;
-
-	cache_operation(TEE_CACHECLEAN, tmpbuf, buf_sz);
-	cache_operation(TEE_CACHECLEAN, efuse_op, sizeof(*efuse_op));
-
-	addr = virt_to_phys(efuse_op);
-
-	efuse_ret = zynqmp_sip_call(EFUSE_ACCESS_SMC, addr >> 32, addr, 0, 0,
-				    NULL);
-	if (efuse_ret) {
-		if (efuse_ret == EFUSE_NOT_ENABLED)
-			EMSG("eFuse access is not enabled");
-		else
-			EMSG("Error in eFuse access %#"PRIx32, efuse_ret);
-		res = TEE_ERROR_GENERIC;
-		goto out;
-	}
-
-	if (op == EFUSE_READ) {
-		res = cache_operation(TEE_CACHEINVALIDATE, tmpbuf, buf_sz);
-		if (res)
-			goto out;
-		memcpy(buf, tmpbuf, buf_sz);
-	}
-
-	res = TEE_SUCCESS;
+    struct xilinx_efuse *efuse_op = NULL;
+    uint8_t *tmpbuf = NULL;
+    paddr_t addr = 0;
+    uint32_t efuse_ret = 0;
+    TEE_Result res = TEE_ERROR_GENERIC;
+
+    if (!buf)
+        return TEE_ERROR_BAD_PARAMETERS;
+
+    if (id >= ARRAY_SIZE(efuse_tbl)) {
+        EMSG("Invalid efuse");
+        return TEE_ERROR_BAD_PARAMETERS;
+    }
+
+    efuse_op = alloc_cache_aligned(sizeof(*efuse_op));
+    if (!efuse_op) {
+        EMSG("Failed to allocate cache aligned buffer for operation");
+        return TEE_ERROR_OUT_OF_MEMORY;
+    }
+
+    tmpbuf = alloc_cache_aligned(buf_sz);
+    if (!tmpbuf) {
+        EMSG("Failed to allocate cache aligned buffer for data");
+        res = TEE_ERROR_OUT_OF_MEMORY;
+        goto out;
+    }
+
+    if (op == EFUSE_WRITE)
+        memcpy(tmpbuf, buf, buf_sz);
+
+    efuse_op->size = efuse_tbl[id].bytes / sizeof(uint32_t);
+    efuse_op->offset = efuse_tbl[id].offset;
+    efuse_op->src = virt_to_phys(tmpbuf);
+    efuse_op->pufuserfuse = puf;
+    efuse_op->flag = op;
+
+    cache_operation(TEE_CACHECLEAN, tmpbuf, buf_sz);
+    cache_operation(TEE_CACHECLEAN, efuse_op, sizeof(*efuse_op));
+
+    addr = virt_to_phys(efuse_op);
+
+    efuse_ret = zynqmp_sip_call(EFUSE_ACCESS_SMC, addr >> 32, addr, 0, 0, NULL);
+    if (efuse_ret) {
+        if (efuse_ret == EFUSE_NOT_ENABLED)
+            EMSG("eFuse access is not enabled");
+        else
+            EMSG("Error in eFuse access %#" PRIx32, efuse_ret);
+        res = TEE_ERROR_GENERIC;
+        goto out;
+    }
+
+    if (op == EFUSE_READ) {
+        res = cache_operation(TEE_CACHEINVALIDATE, tmpbuf, buf_sz);
+        if (res)
+            goto out;
+        memcpy(buf, tmpbuf, buf_sz);
+    }
+
+    res = TEE_SUCCESS;
 
 out:
-	free(tmpbuf);
-	free(efuse_op);
-	return res;
+    free(tmpbuf);
+    free(efuse_op);
+    return res;
 }
 
 TEE_Result zynqmp_efuse_read(uint8_t *buf, size_t sz, enum zynqmp_efuse_id id,
-			     bool puf)
+    bool puf)
 {
-	return efuse_op(EFUSE_READ, buf, sz, id, puf);
+    return efuse_op(EFUSE_READ, buf, sz, id, puf);
 }
 
 TEE_Result zynqmp_efuse_write(uint8_t *buf, size_t sz, enum zynqmp_efuse_id id,
-			      bool puf)
+    bool puf)
 {
-	return efuse_op(EFUSE_WRITE, buf, sz, id, puf);
+    return efuse_op(EFUSE_WRITE, buf, sz, id, puf);
 }
 
 TEE_Result zynqmp_soc_version(uint32_t *version)
 {
-	uint32_t res = 0;
+    uint32_t res = 0;
+
+    if (!version)
+        return TEE_ERROR_BAD_PARAMETERS;
+
+    res = zynqmp_sip_call(VERSION_ACCESS_SMC, 0, 0, 0, 0, version);
+    if (res) {
+        EMSG("Failed to retrieve version");
+        return TEE_ERROR_GENERIC;
+    }
+
+    return TEE_SUCCESS;
+}
+
+TEE_Result zynqmp_fpga_load(void *addr, size_t len, uint32_t flags)
+{
+    TEE_Result status = TEE_SUCCESS;
+    uint32_t res = 0;
+    paddr_t phys = virt_to_phys(addr);
+
+    if (!IS_ALIGNED(phys, ZYNQMP_CSUDMA_ALIGN)) {
+        EMSG("Invalid alignment");
+        return TEE_ERROR_BAD_PARAMETERS;
+    }
 
-	if (!version)
-		return TEE_ERROR_BAD_PARAMETERS;
+    if ((status = cache_operation(TEE_CACHECLEAN, addr, len)) != TEE_SUCCESS) {
+        EMSG("Fail to clean the cache");
+        return status;
+    }
 
-	res = zynqmp_sip_call(VERSION_ACCESS_SMC, 0, 0, 0, 0, version);
-	if (res) {
-		EMSG("Failed to retrieve version");
-		return TEE_ERROR_GENERIC;
-	}
+    res = zynqmp_sip_call(PM_FPGA_LOAD, phys, phys >> 32, len, flags, NULL);
+    if (res) {
+        EMSG("Failed to load fpga: %u (%s)", res, str_pm_ret_status(res));
+        return TEE_ERROR_GENERIC;
+    }
 
-	return TEE_SUCCESS;
+    return TEE_SUCCESS;
 }
diff --git a/core/include/drivers/zynqmp_pm.h b/core/include/drivers/zynqmp_pm.h
index 62de2b12..f6a2800b 100644
--- a/core/include/drivers/zynqmp_pm.h
+++ b/core/include/drivers/zynqmp_pm.h
@@ -63,4 +63,6 @@ TEE_Result zynqmp_efuse_write(uint8_t *buf, size_t buf_sz,
  */
 TEE_Result zynqmp_soc_version(uint32_t *version);
 
+TEE_Result zynqmp_fpga_load(void *addr, size_t len, uint32_t flags);
+
 #endif /*__DRIVERS_ZYNQMP_PM_H__*/
diff --git a/core/kernel/tee_misc.c b/core/kernel/tee_misc.c
index 3beb3ea9..edc218b1 100644
--- a/core/kernel/tee_misc.c
+++ b/core/kernel/tee_misc.c
@@ -128,12 +128,16 @@ void *alloc_cache_aligned(size_t size)
 	uint32_t cacheline_size = 0;
 
 	cacheline_size = cache_get_max_line_size();
-	if (ROUNDUP_OVERFLOW(size, cacheline_size, &alloc_size))
+	if (ROUNDUP_OVERFLOW(size, cacheline_size, &alloc_size)) {
+		DMSG("ROUNDUP failed");
 		return NULL;
+	}
 
 	ptr = memalign(cacheline_size, alloc_size);
-	if (!ptr)
+	if (!ptr) {
+		DMSG("MEMALIGN failed");
 		return NULL;
+	}
 
 	memset(ptr, 0, size);
 
diff --git a/core/pta/sub.mk b/core/pta/sub.mk
index a20bc6c2..da3fd492 100644
--- a/core/pta/sub.mk
+++ b/core/pta/sub.mk
@@ -14,5 +14,6 @@ srcs-$(CFG_APDU_PTA) += apdu.c
 srcs-$(CFG_SCMI_PTA) += scmi.c
 srcs-$(CFG_HWRNG_PTA) += hwrng.c
 srcs-$(CFG_RTC_PTA) += rtc.c
+srcs-$(CFG_ZYNQMP_PM) += zynqmp_pm.c
 
 subdirs-y += bcm
diff --git a/core/pta/zynqmp_pm.c b/core/pta/zynqmp_pm.c
new file mode 100644
index 00000000..38b8484a
--- /dev/null
+++ b/core/pta/zynqmp_pm.c
@@ -0,0 +1,93 @@
+#include "kernel/tee_misc.h"
+#include "string.h"
+#include <drivers/zynqmp_pm.h>
+#include <kernel/pseudo_ta.h>
+#include <pta_zynqmp_pm.h>
+#include <tee_api_defines.h>
+#include <tee_api_types.h>
+#include <trace.h>
+
+#define PTA_NAME "zynqmp_pm.pta"
+
+static TEE_Result pta_soc_version(uint32_t param_types, TEE_Param params[TEE_NUM_PARAMS])
+{
+    if (param_types != TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_OUTPUT, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE)) {
+        return TEE_ERROR_BAD_PARAMETERS;
+    }
+
+    return zynqmp_soc_version(&params[0].value.a);
+}
+
+struct session_fpga_load {
+    size_t len;
+    size_t off;
+    void *mem;
+} _session;
+
+static TEE_Result pta_fpga_load(uint32_t cmd_id, uint32_t param_types, TEE_Param params[TEE_NUM_PARAMS])
+{
+    if (cmd_id == PTA_CMD_ZYNQMP_FPGA_LOAD_INIT) {
+        if (param_types != TEE_PARAM_TYPES(TEE_PARAM_TYPE_VALUE_INPUT, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE)) {
+            return TEE_ERROR_BAD_PARAMETERS;
+        }
+
+        _session.off = 0;
+        _session.len = params[0].value.a;
+
+        DMSG("Allocating memory of size %lu (0x%lx)", _session.len, _session.len);
+        _session.mem = alloc_cache_aligned(_session.len);
+        DMSG("Memory allocated %p", _session.mem);
+        return _session.mem ? TEE_SUCCESS : TEE_ERROR_OUT_OF_MEMORY;
+    }
+
+    if (cmd_id == PTA_CMD_ZYNQMP_FPGA_LOAD_UPDATE) {
+        if (param_types != TEE_PARAM_TYPES(TEE_PARAM_TYPE_MEMREF_INPUT, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE)) {
+            return TEE_ERROR_BAD_PARAMETERS;
+        }
+
+        if (_session.off + params[0].memref.size > _session.len) {
+            return TEE_ERROR_BAD_STATE;
+        }
+
+        memcpy((uint8_t *)_session.mem + _session.off, params[0].memref.buffer, params[0].memref.size);
+        _session.off += params[0].memref.size;
+        return TEE_SUCCESS;
+    }
+
+    if (cmd_id == PTA_CMD_ZYNQMP_FPGA_LOAD_PROGRAM) {
+        if (param_types != TEE_PARAM_TYPES(TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE, TEE_PARAM_TYPE_NONE)) {
+            return TEE_ERROR_BAD_PARAMETERS;
+        }
+
+        if (_session.len != _session.off) {
+            return TEE_ERROR_BAD_STATE;
+        }
+
+        return zynqmp_fpga_load(_session.mem, _session.len, 0);
+    }
+
+    return TEE_ERROR_NOT_SUPPORTED;
+}
+
+static TEE_Result invoke_command(void *sess_ctx __unused, uint32_t cmd_id,
+    uint32_t param_types,
+    TEE_Param params[TEE_NUM_PARAMS])
+{
+    switch (cmd_id) {
+    case PTA_CMD_ZYNQMP_SOC_VERSION:
+        return pta_soc_version(param_types, params);
+    case PTA_CMD_ZYNQMP_FPGA_LOAD_INIT:
+    case PTA_CMD_ZYNQMP_FPGA_LOAD_UPDATE:
+    case PTA_CMD_ZYNQMP_FPGA_LOAD_PROGRAM:
+        return pta_fpga_load(cmd_id, param_types, params);
+    default:
+        EMSG("Unexpected cmd_id = %x\n", cmd_id);
+        return TEE_ERROR_BAD_PARAMETERS;
+    }
+
+    return TEE_SUCCESS;
+}
+
+pseudo_ta_register(.uuid = PTA_ZYNQMP_PM_UUID, .name = PTA_NAME,
+    .flags = PTA_DEFAULT_FLAGS,
+    .invoke_command_entry_point = invoke_command);
diff --git a/lib/libutee/include/pta_zynqmp_pm.h b/lib/libutee/include/pta_zynqmp_pm.h
new file mode 100644
index 00000000..b9d59f7c
--- /dev/null
+++ b/lib/libutee/include/pta_zynqmp_pm.h
@@ -0,0 +1,28 @@
+
+
+#ifndef __PTA_ZYNQMP_PM_H
+#define __PTA_ZYNQMP_PM_H
+
+/*
+ * identifier of the pta
+ */
+#define PTA_ZYNQMP_PM_UUID                                 \
+    {                                                      \
+        0x68f3df04, 0x66f6, 0x11ed,                        \
+        {                                                  \
+            0xb9, 0xcb, 0x33, 0xb0, 0xf8, 0xb5, 0xe6, 0x1e \
+        }                                                  \
+    }
+
+/*
+ * commands
+ */
+
+#define PTA_CMD_ZYNQMP_SOC_VERSION       0x0018
+#define PTA_CMD_ZYNQMP_EFUSE_READ        0x0035
+#define PTA_CMD_ZYNQMP_EFUSE_WRITE       0x0135
+#define PTA_CMD_ZYNQMP_FPGA_LOAD_INIT    0x0116
+#define PTA_CMD_ZYNQMP_FPGA_LOAD_UPDATE  0x0216
+#define PTA_CMD_ZYNQMP_FPGA_LOAD_PROGRAM 0x0316
+
+#endif /*__PTA_ZYNQMP_PM_H*/
diff --git a/lib/libutils/ext/trace.c b/lib/libutils/ext/trace.c
index 33c099d2..ffc993a7 100644
--- a/lib/libutils/ext/trace.c
+++ b/lib/libutils/ext/trace.c
@@ -146,7 +146,7 @@ void trace_vprintf(const char *function, int line, int level, bool level_ok,
 		boffs += res;
 
 		if (function) {
-			res = snprintk(buf + boffs, sizeof(buf) - boffs, "%s:%d ",
+			res = snprintk(buf + boffs, sizeof(buf) - boffs, "[%s:%d] ",
 				       function, line);
 			if (res < 0)
 				return;
-- 
2.34.1

